name: Docker Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push MySQL DB image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db ./backend/db
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
    
    - name: Build and push Spring Boot image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot ./backend/springboot
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
    
    - name: Build and push Python API image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api ./backend/python
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
    
    - name: Build and push Frontend image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend ./frontend
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
    
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master
      with:
        username: ubuntu
        host: ${{ secrets.LIVE_SERVER_IP }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 기존 컨테이너 정리
          if [ "$(sudo docker ps -a -q -f name=mozara-mysql)" ]; then
            sudo docker rm -f mozara-mysql
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-springboot)" ]; then
            sudo docker rm -f mozara-springboot
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-python-api)" ]; then
            sudo docker rm -f mozara-python-api
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-frontend)" ]; then
            sudo docker rm -f mozara-frontend
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-nginx)" ]; then
            sudo docker rm -f mozara-nginx
          fi
          
          # 기존 이미지 정리
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          fi
          
          # Docker Hub에서 최신 이미지 pull
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          
          # 1. MySQL 시작
          sudo docker run -d \
            --name mozara-mysql \
            -p 3306:3306 \
            -v mysql_data:/var/lib/mysql \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          
          # MySQL 대기
          sleep 10
          
          # 2. Spring Boot 시작
          sudo docker run -d \
            --name mozara-springboot \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/mozara?useSSL=false&serverTimezone=UTC \
            -e SPRING_DATASOURCE_USERNAME=root \
            -e SPRING_DATASOURCE_PASSWORD=1234 \
            -e AI_PYTHON_BASE_URL=http://localhost:8000 \
            -e ELEVEN_ST_API_KEY=${{ secrets.ELEVEN_ST_API_KEY }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          
          # 3. Python API 시작
          sudo docker run -d \
            --name mozara-python-api \
            -p 8000:8000 \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }} \
            -e ELEVEN_ST_API_KEY=${{ secrets.ELEVEN_ST_API_KEY }} \
            -e PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
            -e PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }} \
            -e PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }} \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          
          # 4. Frontend 시작
          sudo docker run -d \
            --name mozara-frontend \
            -p 3000:80 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          
          # 5. Nginx 프록시 시작
          sudo docker run -d \
            --name mozara-nginx \
            -p 80:80 \
            -v /tmp/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
            --restart unless-stopped \
            nginx:alpine
          
          # Nginx 설정 파일 생성
          echo "server {" > /tmp/nginx.conf
          echo "    listen 80;" >> /tmp/nginx.conf
          echo "    server_name mozaracare.duckdns.org;" >> /tmp/nginx.conf
          echo "    client_max_body_size 10m;" >> /tmp/nginx.conf
          echo "    location / {" >> /tmp/nginx.conf
          echo "        proxy_pass http://172.17.0.1:3000;" >> /tmp/nginx.conf
          echo "        proxy_http_version 1.1;" >> /tmp/nginx.conf
          echo "        proxy_set_header Upgrade \$http_upgrade;" >> /tmp/nginx.conf
          echo "        proxy_set_header Connection 'upgrade';" >> /tmp/nginx.conf
          echo "        proxy_set_header Host \$host;" >> /tmp/nginx.conf
          echo "        proxy_cache_bypass \$http_upgrade;" >> /tmp/nginx.conf
          echo "    }" >> /tmp/nginx.conf
          echo "    location /api/ {" >> /tmp/nginx.conf
          echo "        proxy_pass http://172.17.0.1:8080/api/;" >> /tmp/nginx.conf
          echo "        proxy_http_version 1.1;" >> /tmp/nginx.conf
          echo "        proxy_set_header Upgrade \$http_upgrade;" >> /tmp/nginx.conf
          echo "        proxy_set_header Connection 'upgrade';" >> /tmp/nginx.conf
          echo "        proxy_set_header Host \$host;" >> /tmp/nginx.conf
          echo "        proxy_cache_bypass \$http_upgrade;" >> /tmp/nginx.conf
          echo "    }" >> /tmp/nginx.conf
          echo "    location /ws-game/ {" >> /tmp/nginx.conf
          echo "        proxy_pass http://172.17.0.1:8080/ws-game/;" >> /tmp/nginx.conf
          echo "        proxy_http_version 1.1;" >> /tmp/nginx.conf
          echo "        proxy_set_header Upgrade \$http_upgrade;" >> /tmp/nginx.conf
          echo "        proxy_set_header Connection \"Upgrade\";" >> /tmp/nginx.conf
          echo "        proxy_set_header Host \$host;" >> /tmp/nginx.conf
          echo "    }" >> /tmp/nginx.conf
          echo "    location /uploads/ {" >> /tmp/nginx.conf
          echo "        proxy_pass http://172.17.0.1:8080/uploads/;" >> /tmp/nginx.conf
          echo "    }" >> /tmp/nginx.conf
          echo "}" >> /tmp/nginx.conf
          
          # Nginx 컨테이너 재시작
          sudo docker restart mozara-nginx
          
          # 서비스 상태 확인
          sleep 5
          sudo docker ps
          
          echo "✅ 배포 완료!"
          echo "🌐 서비스 URL: http://${{ secrets.LIVE_SERVER_IP }}"