name: Docker Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          db:
            - 'backend/db/**'
          springboot:
            - 'backend/springboot/**'
          python:
            - 'backend/python/**'
          frontend:
            - 'frontend/**'
    
    - name: Build and push MySQL DB image
      if: steps.changes.outputs.db == 'true'
      run: |
        echo "🔨 DB 변경사항 감지 - 이미지 빌드 중..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db ./backend/db
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
    
    - name: Build and push Spring Boot image
      if: steps.changes.outputs.springboot == 'true'
      run: |
        echo "🔨 Spring Boot 변경사항 감지 - 이미지 빌드 중..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot ./backend/springboot
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
    
    - name: Build and push Python API image
      if: steps.changes.outputs.python == 'true'
      run: |
        echo "🔨 Python API 변경사항 감지 - 이미지 빌드 중..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api ./backend/python
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
    
    - name: Build and push Frontend image
      if: steps.changes.outputs.frontend == 'true'
      run: |
        echo "🔨 Frontend 변경사항 감지 - 이미지 빌드 중..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend ./frontend
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
    
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master
      with:
        username: ubuntu
        host: ${{ secrets.LIVE_SERVER_IP }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 30m
        command_timeout: 30m
        script: |
          # Docker 설치 확인 및 설치
          if ! command -v docker &> /dev/null; then
            echo "🔧 Docker 설치 중..."
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            echo "✅ Docker 설치 완료"
          else
            echo "✅ Docker 이미 설치됨"
          fi
          
          # Swapfile 설정 (메모리 부족 해결)
          if [ ! -f /swapfile ]; then
            echo "🔧 Swapfile 생성 중..."
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "✅ Swapfile 생성 완료 (2GB)"
          else
            echo "✅ Swapfile 이미 존재함"
          fi
          
          # 기존 컨테이너 정리
          if [ "$(sudo docker ps -a -q -f name=mozara-mysql)" ]; then
            sudo docker rm -f mozara-mysql
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-springboot)" ]; then
            sudo docker rm -f mozara-springboot
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-python-api)" ]; then
            sudo docker rm -f mozara-python-api
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-frontend)" ]; then
            sudo docker rm -f mozara-frontend
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-nginx)" ]; then
            sudo docker rm -f mozara-nginx
          fi
          
          # 기존 이미지 정리
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          fi
          if [ "$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend)" ]; then
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          fi
          
          # Docker Hub에서 최신 이미지 pull
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          
          # 1. MySQL 시작
          sudo docker run -d \
            --name mozara-mysql \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=1234 \
            -e MYSQL_DATABASE=mozara \
            -v mysql_data:/var/lib/mysql \
            --memory=512m \
            --cpus=0.5 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-db
          
          # MySQL 대기 (초기화 시간 고려)
          echo "⏳ MySQL 초기화 대기 중..."
          sleep 30
          
          # MySQL 상태 확인
          echo "🔍 MySQL 상태 확인..."
          sudo docker ps | grep mozara-mysql || echo "❌ MySQL 컨테이너 문제 발생"
          sudo docker logs mozara-mysql --tail 10 || echo "MySQL 로그 확인 실패"
          
          # 2. Spring Boot 시작
          sudo docker run -d \
            --name mozara-springboot \
            -p 8080:8080 \
            -e "SPRING_DATASOURCE_URL=jdbc:mysql://mozara-mysql:3306/mozara?useSSL=false&serverTimezone=UTC" \
            -e "SPRING_DATASOURCE_USERNAME=root" \
            -e "SPRING_DATASOURCE_PASSWORD=1234" \
            -e "AI_PYTHON_BASE_URL=http://mozara-python-api:8000" \
            -e "ELEVEN_ST_API_KEY=${{ secrets.ELEVEN_ST_API_KEY }}" \
            -e "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
            -e "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            -e "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" \
            --memory=256m \
            --cpus=0.3 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-springboot
          
          # Spring Boot 시작 대기
          echo "⏳ Spring Boot 시작 대기 중..."
          sleep 15
          
          # 3. Python API 시작
          sudo docker run -d \
            --name mozara-python-api \
            -p 8000:8000 \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }} \
            -e ELEVEN_ST_API_KEY=${{ secrets.ELEVEN_ST_API_KEY }} \
            -e PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
            -e PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }} \
            -e PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }} \
            --memory=128m \
            --cpus=0.2 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-python-api
          
          # 4. Frontend 시작
          sudo docker run -d \
            --name mozara-frontend \
            -p 3000:80 \
            --memory=64m \
            --cpus=0.1 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/mozara-frontend
          
          # Let's Encrypt 인증서 발급
          if [ ! -d "/etc/letsencrypt/live/mozaracare.duckdns.org" ]; then
            echo "🔐 SSL 인증서 발급 중..."
            sudo apt update
            sudo apt install -y certbot
            sudo certbot certonly --standalone -d mozaracare.duckdns.org --non-interactive --agree-tos --email admin@mozaracare.duckdns.org
            echo "✅ SSL 인증서 발급 완료"
          else
            echo "✅ SSL 인증서 이미 존재함"
          fi
          
          # Nginx 설정 파일 생성
          sudo rm -rf /tmp/nginx.conf
          sudo tee /tmp/nginx.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name mozaracare.duckdns.org 15.165.239.48;
              client_max_body_size 10m;
              
              # HTTP to HTTPS redirect
              return 301 https://$server_name$request_uri;
          }
          
          server {
              listen 443 ssl;
              http2 on;
              server_name mozaracare.duckdns.org 15.165.239.48;
              client_max_body_size 10m;
              
              # SSL 인증서 설정 (Let's Encrypt)
              ssl_certificate /etc/letsencrypt/live/mozaracare.duckdns.org/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/mozaracare.duckdns.org/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              location / {
                  proxy_pass http://mozara-frontend:80;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              location /api/ {
                  proxy_pass http://mozara-springboot:8080/api/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              location /ws-game/ {
                  proxy_pass http://mozara-springboot:8080/ws-game/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "Upgrade";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /uploads/ {
                  proxy_pass http://mozara-springboot:8080/uploads/;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF
          
          # 5. Nginx 프록시 시작
          sudo docker run -d \
            --name mozara-nginx \
            -p 80:80 \
            -p 443:443 \
            -v /tmp/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            --memory=32m \
            --cpus=0.1 \
            --restart unless-stopped \
            --link mozara-frontend:mozara-frontend \
            --link mozara-springboot:mozara-springboot \
            nginx:alpine
          
          # 서비스 상태 확인
          sleep 5
          sudo docker ps
          
          echo "✅ 배포 완료!"
          echo "🌐 서비스 URL: http://${{ secrets.LIVE_SERVER_IP }}"