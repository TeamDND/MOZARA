name: Docker Deploy to AWS

on:
  push:
    branches: [ main ]
    paths: 
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      run: |
        cd docker
        docker-compose build
        
        # 이미지가 정상적으로 빌드되는지 테스트
        docker-compose config
        echo "✅ Docker 빌드 테스트 성공!"

  deploy:
    runs-on: ubuntu-latest
    # main 브랜치에서만 실제 배포
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      continue-on-error: true
    
    - name: Set environment variables
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        ELEVEN_ST_API_KEY: ${{ secrets.ELEVEN_ST_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        LIVE_SERVER_IP: ${{ secrets.LIVE_SERVER_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "환경변수 설정 완료"
    
    - name: Create SSH key file
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/aws_key.pem
        chmod 600 ~/.ssh/aws_key.pem
    
    - name: Build and test Docker images
      run: |
        cd docker
        
        # Docker Compose 파일 존재 확인
        if [ ! -f "docker-compose.yml" ]; then
          echo "❌ docker-compose.yml 파일을 찾을 수 없습니다."
          ls -la
          exit 1
        fi
        
        # PR에서는 환경변수 없이 설정 파일만 검증
        echo "🔍 Docker Compose 설정 파일 검증 중..."
        docker compose config --quiet
        
        echo "✅ Docker Compose 설정 검증 완료"
    
    - name: Deploy to AWS EC2
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        cd docker
        # EC2 인스턴스에 Docker 관련 파일들 복사
        echo "📁 파일을 ${{ secrets.LIVE_SERVER_IP }}에 복사합니다..."
        # LIVE_SERVER_IP 값 확인 및 검증
        echo "LIVE_SERVER_IP 값: '${{ secrets.LIVE_SERVER_IP }}'"
        echo "LIVE_SERVER_IP 길이: $(echo '${{ secrets.LIVE_SERVER_IP }}' | wc -c)"
        
        # LIVE_SERVER_IP가 비어있거나 잘못된 형식인지 확인
        if [ -z "${{ secrets.LIVE_SERVER_IP }}" ]; then
          echo "❌ LIVE_SERVER_IP가 비어있습니다!"
          exit 1
        fi
        
        if [[ "${{ secrets.LIVE_SERVER_IP }}" == http* ]]; then
          echo "❌ LIVE_SERVER_IP에 http:// 또는 https://가 포함되어 있습니다!"
          echo "올바른 형식: your-domain.duckdns.org 또는 IP주소"
          exit 1
        fi
        scp -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no \
          docker-compose.yml \
          docker-compose.prod.yml \
          nginx.conf \
          ubuntu@${{ secrets.LIVE_SERVER_IP }}:/home/ubuntu/mozara/
        
        # EC2에서 배포 실행
        ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} << 'EOF'
          cd /home/ubuntu/mozara
          
          # 환경변수 설정 (GitHub Secrets에서 직접 전달)
          export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export YOUTUBE_API_KEY="${{ secrets.YOUTUBE_API_KEY }}"
          export ELEVEN_ST_API_KEY="${{ secrets.ELEVEN_ST_API_KEY }}"
          export PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}"
          export PINECONE_ENVIRONMENT="${{ secrets.PINECONE_ENVIRONMENT }}"
          export PINECONE_INDEX_NAME="${{ secrets.PINECONE_INDEX_NAME }}"
          export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
          
          # Docker 설치 확인 및 설치
          if ! command -v docker &> /dev/null; then
            echo "Docker 설치 중..."
            sudo apt update
            sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Docker Compose 설치 확인 및 설치
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose 설치 중..."
            sudo apt install -y docker-compose-plugin
            # 또는 standalone docker-compose 설치
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Docker Compose 버전 확인
          echo "Docker Compose 버전 확인:"
          docker compose version || docker-compose --version
          
          # Docker Hub 로그인 (선택사항)
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] && [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || echo "Docker Hub 로그인 실패, 계속 진행..."
          else
            echo "⚠️ Docker Hub 자격 증명이 없습니다. 로컬 빌드만 수행합니다."
          fi
          
          # Docker Compose 명령어 결정
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE="docker-compose"
          else
            DOCKER_COMPOSE="docker compose"
          fi
          
          # 기존 컨테이너 정리
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml down --volumes --remove-orphans
          
          # 새 컨테이너 시작 (순서대로)
          echo "🚀 새 컨테이너 시작..."
          echo "1️⃣ MySQL 데이터베이스 시작..."
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml up -d mysql
          
          echo "⏳ MySQL 컨테이너 시작 대기..."
          sleep 5
          
          # MySQL 컨테이너 상태 확인
          if ! sudo $DOCKER_COMPOSE -f docker-compose.prod.yml ps mysql | grep -q "Up"; then
            echo "❌ MySQL 컨테이너가 시작되지 않았습니다. 로그 확인:"
            sudo $DOCKER_COMPOSE -f docker-compose.prod.yml logs mysql
            exit 1
          fi
          echo "✅ MySQL 컨테이너가 시작되었습니다."
          
          echo "⏳ MySQL 헬스체크 대기..."
          for i in {1..30}; do
            if sudo $DOCKER_COMPOSE -f docker-compose.prod.yml exec mysql mysqladmin ping -h localhost -u root -p1234 --silent; then
              echo "✅ MySQL이 준비되었습니다."
              break
            else
              echo "⏳ MySQL 대기 중... ($i/30)"
              sleep 2
            fi
            if [ $i -eq 30 ]; then
              echo "❌ MySQL 시작 실패. 컨테이너 로그 확인:"
              sudo $DOCKER_COMPOSE -f docker-compose.prod.yml logs mysql
              exit 1
            fi
          done
          
          echo "2️⃣ Spring Boot 백엔드 시작..."
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml up -d springboot
          
          echo "3️⃣ Python API 백엔드 시작..."
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml up -d python-api
          
          echo "4️⃣ React 프론트엔드 시작..."
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml up -d frontend
          
          echo "5️⃣ Nginx 프록시 시작..."
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml up -d nginx
          
          # 서비스 상태 확인
          sleep 10
          sudo $DOCKER_COMPOSE -f docker-compose.prod.yml ps
          
          echo "✅ AWS 배포 완료!"
          echo "🌐 서비스 URL: https://mozaracare.duckdns.org"
        EOF
    
    - name: Health check
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # 서비스 상태 확인
        sleep 30
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8080/actuator/health || echo "Spring Boot health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8000/ || echo "Python FastAPI health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:3000 || echo "Frontend health check failed"
        echo "🌐 최종 서비스 URL: https://mozaracare.duckdns.org"
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/aws_key.pem
