name: Docker Deploy to AWS

on:
  push:
    branches: [ main ]
    paths: 
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      run: |
        cd docker
        docker-compose build
        
        # 이미지가 정상적으로 빌드되는지 테스트
        docker-compose config
        echo "✅ Docker 빌드 테스트 성공!"

  deploy:
    runs-on: ubuntu-latest
    # main 브랜치에서만 실제 배포
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      continue-on-error: true
    
    - name: Set environment variables
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |

        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
        echo "ELEVEN_ST_API_KEY=${{ secrets.ELEVEN_ST_API_KEY }}" >> $GITHUB_ENV
        echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> $GITHUB_ENV
        echo "PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}" >> $GITHUB_ENV
        echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
        echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_ENV
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
        echo "LIVE_SERVER_IP=${{ secrets.LIVE_SERVER_IP }}" >> $GITHUB_ENV
        echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> $GITHUB_ENV

    
    - name: Create SSH key file
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/aws_key.pem
        chmod 600 ~/.ssh/aws_key.pem
    
    - name: Build and test Docker images
      run: |
        cd docker
        
        # Docker Compose 파일 존재 확인
        if [ ! -f "docker-compose.yml" ]; then
          echo "❌ docker-compose.yml 파일을 찾을 수 없습니다."
          ls -la
          exit 1
        fi
        
        # PR에서는 환경변수 없이 설정 파일만 검증
        echo "🔍 Docker Compose 설정 파일 검증 중..."
        docker compose config --quiet
        
        echo "✅ Docker Compose 설정 검증 완료"
    
    - name: Deploy to AWS EC2
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # EC2 인스턴스에 Docker 관련 파일들 복사
        echo "📁 파일을 ${{ secrets.LIVE_SERVER_IP }}에 복사합니다..."
        scp -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no \
          docker-compose.yml \
          docker-compose.prod.yml \
          nginx.conf \
          ubuntu@${{ secrets.LIVE_SERVER_IP }}:/home/ubuntu/mozara/
        
        # EC2에서 배포 실행
        ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} << EOF
          cd /home/ubuntu/mozara
          
          # 환경변수 설정
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          export OPENAI_API_KEY="$OPENAI_API_KEY"
          export YOUTUBE_API_KEY="$YOUTUBE_API_KEY"
          export ELEVEN_ST_API_KEY="$ELEVEN_ST_API_KEY"
          export PINECONE_API_KEY="$PINECONE_API_KEY"
          export PINECONE_ENVIRONMENT="$PINECONE_ENVIRONMENT"
          export PINECONE_INDEX_NAME="$PINECONE_INDEX_NAME"
          export GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID"
          export GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET"
          export KAKAO_CLIENT_SECRET="$KAKAO_CLIENT_SECRET"
          export JWT_SECRET_KEY="$JWT_SECRET_KEY"
          
          # Docker 설치 확인 및 설치
          if ! command -v docker &> /dev/null; then
            echo "Docker 설치 중..."
            sudo apt update
            sudo apt install -y docker.io docker-compose
            sudo usermod -aG docker ubuntu
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Docker Hub 로그인 (선택사항)
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] && [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || echo "Docker Hub 로그인 실패, 계속 진행..."
          else
            echo "⚠️ Docker Hub 자격 증명이 없습니다. 로컬 빌드만 수행합니다."
          fi
          
          # 기존 컨테이너 정리
          sudo docker compose -f docker-compose.prod.yml down --volumes --remove-orphans
          
          # 새 컨테이너 시작 (순서대로)
          echo "🚀 새 컨테이너 시작..."
          echo "1️⃣ MySQL 데이터베이스 시작..."
          sudo docker compose -f docker-compose.prod.yml up -d mysql
          
          echo "⏳ MySQL 헬스체크 대기..."
          timeout 60 bash -c 'until sudo docker compose -f docker-compose.prod.yml exec mysql mysqladmin ping -h localhost -u root -p1234 --silent; do sleep 2; done'
          
          echo "2️⃣ Spring Boot 백엔드 시작..."
          sudo docker compose -f docker-compose.prod.yml up -d springboot
          
          echo "3️⃣ Python API 백엔드 시작..."
          sudo docker compose -f docker-compose.prod.yml up -d python-api
          
          echo "4️⃣ React 프론트엔드 시작..."
          sudo docker compose -f docker-compose.prod.yml up -d frontend
          
          echo "5️⃣ Nginx 프록시 시작..."
          sudo docker compose -f docker-compose.prod.yml up -d nginx
          
          # 서비스 상태 확인
          sleep 10
          sudo docker compose -f docker-compose.prod.yml ps
          
          echo "✅ AWS 배포 완료!"
          echo "🌐 서비스 URL: https://mozaracare.duckdns.org"
        EOF
    
    - name: Health check
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # 서비스 상태 확인
        sleep 30
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8080/actuator/health || echo "Spring Boot health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8000/ || echo "Python FastAPI health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:3000 || echo "Frontend health check failed"
        echo "🌐 최종 서비스 URL: https://mozaracare.duckdns.org"
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/aws_key.pem
