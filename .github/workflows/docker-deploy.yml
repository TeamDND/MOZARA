name: Docker Deploy to AWS

on:
  push:
    branches: [ main ]
    paths: 
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
  # pull_request 비활성화 (main 브랜치에서만 deploy 실행)
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'docker/**'
  #     - 'backend/**'
  #     - 'frontend/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      run: |
        cd docker
        docker-compose build
        
        # 이미지가 정상적으로 빌드되는지 테스트
        docker-compose config
        echo "✅ Docker 빌드 테스트 성공!"

  deploy:
    runs-on: ubuntu-latest
    # main 브랜치에서만 실제 배포
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      continue-on-error: true
    
    - name: Set environment variables
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        ELEVEN_ST_API_KEY: ${{ secrets.ELEVEN_ST_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        LIVE_SERVER_IP: ${{ secrets.LIVE_SERVER_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "환경변수 설정 완료"
    
    - name: Create SSH key file
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/aws_key.pem
        chmod 600 ~/.ssh/aws_key.pem
    
    - name: Build and push Docker images
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # Docker Hub 로그인
        echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
        
        # Spring Boot 이미지 빌드 및 푸시
        echo "🔨 Spring Boot 이미지 빌드 중..."
        docker build -t $DOCKERHUB_USERNAME/mozara-springboot ./backend/springboot
        docker push $DOCKERHUB_USERNAME/mozara-springboot
        
        # Python API 이미지 빌드 및 푸시
        echo "🔨 Python API 이미지 빌드 중..."
        docker build -t $DOCKERHUB_USERNAME/mozara-python-api ./backend/python
        docker push $DOCKERHUB_USERNAME/mozara-python-api
        
        # Frontend 이미지 빌드 및 푸시
        echo "🔨 Frontend 이미지 빌드 중..."
        docker build -t $DOCKERHUB_USERNAME/mozara-frontend ./frontend
        docker push $DOCKERHUB_USERNAME/mozara-frontend
        
        echo "✅ 모든 Docker 이미지 빌드 및 푸시 완료"
    
    - name: Deploy to AWS EC2
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # EC2 인스턴스에 전체 프로젝트 복사
        echo "📁 프로젝트를 ${{ secrets.LIVE_SERVER_IP }}에 복사합니다..."
        # LIVE_SERVER_IP 값 확인 및 검증
        echo "LIVE_SERVER_IP 값: '${{ secrets.LIVE_SERVER_IP }}'"
        echo "LIVE_SERVER_IP 길이: $(echo '${{ secrets.LIVE_SERVER_IP }}' | wc -c)"
        
        # LIVE_SERVER_IP가 비어있거나 잘못된 형식인지 확인
        if [ -z "${{ secrets.LIVE_SERVER_IP }}" ]; then
          echo "❌ LIVE_SERVER_IP가 비어있습니다!"
          exit 1
        fi
        
        if [[ "${{ secrets.LIVE_SERVER_IP }}" == http* ]]; then
          echo "❌ LIVE_SERVER_IP에 http:// 또는 https://가 포함되어 있습니다!"
          echo "올바른 형식: your-domain.duckdns.org 또는 IP주소"
          exit 1
        fi
        
        # 전체 프로젝트를 EC2에 복사 (프로젝트 루트에서 실행)
        rsync -avz --progress -e "ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='.env' \
          --exclude='build' \
          --exclude='dist' \
          ./ ubuntu@${{ secrets.LIVE_SERVER_IP }}:/home/ubuntu/mozara/
        
        # EC2에서 배포 실행
        ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIVE_SERVER_IP }} << EOF
          cd /home/ubuntu/mozara/docker
          
          # .env 파일 생성 (GitHub Secrets에서 직접 전달)
          echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "YOUTUBE_API_KEY=$YOUTUBE_API_KEY" >> .env
          echo "ELEVEN_ST_API_KEY=$ELEVEN_ST_API_KEY" >> .env
          echo "PINECONE_API_KEY=$PINECONE_API_KEY" >> .env
          echo "PINECONE_ENVIRONMENT=$PINECONE_ENVIRONMENT" >> .env
          echo "PINECONE_INDEX_NAME=$PINECONE_INDEX_NAME" >> .env
          echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> .env
          echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> .env
          echo "KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET" >> .env
          echo "DOCKERHUB_TOKEN=$DOCKERHUB_TOKEN" >> .env
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
          
          # .env 파일 권한 설정
          chmod 644 .env
          
          # 환경변수 설정
          set -a
          source .env
          set +a
          
          # Docker 설치 확인 및 설치
          if ! command -v docker &> /dev/null; then
            echo "Docker 설치 중..."
            sudo apt update
            sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Docker Compose 설치 확인 및 설치
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose 설치 중..."
            sudo apt install -y docker-compose-plugin
            # 또는 standalone docker-compose 설치
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Docker Compose 버전 확인
          echo "Docker Compose 버전 확인:"
          docker compose version || docker-compose --version
          
          # Docker Hub 로그인 (선택사항)
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] && [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || echo "Docker Hub 로그인 실패, 계속 진행..."
          else
            echo "⚠️ Docker Hub 자격 증명이 없습니다. 로컬 빌드만 수행합니다."
          fi
          
          # Docker Compose 명령어 결정
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE="docker-compose"
          else
            DOCKER_COMPOSE="docker compose"
          fi
          
          # Docker Compose 파일 확인
          echo "📝 Docker Compose 파일 확인 중..."
          echo "✅ Docker Compose 파일 확인:"
          grep -n "context:\|mozara.sql" docker-compose.prod.yml
          
          # 필수 환경변수 확인
          echo "🔍 필수 환경변수 확인 중..."
          echo "✅ JWT_SECRET_KEY는 application.properties에서 관리됩니다"
          
          # 디렉토리 구조 확인
          echo "📁 디렉토리 구조 확인:"
          ls -la ../
          ls -la ../backend/
          ls -la ../backend/springboot/
          
          # 기존 컨테이너 정리
          echo "🧹 기존 컨테이너 정리 중..."
          if [ "$(sudo docker ps -a -q -f name=mozara-mysql-prod)" ]; then
            sudo docker rm -f mozara-mysql-prod
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-springboot-prod)" ]; then
            sudo docker rm -f mozara-springboot-prod
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-python-api-prod)" ]; then
            sudo docker rm -f mozara-python-api-prod
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-frontend-prod)" ]; then
            sudo docker rm -f mozara-frontend-prod
          fi
          if [ "$(sudo docker ps -a -q -f name=mozara-nginx-prod)" ]; then
            sudo docker rm -f mozara-nginx-prod
          fi
          
          # 기존 볼륨 정리
          if [ "$(sudo docker volume ls -q -f name=mysql_prod_data)" ]; then
            sudo docker volume rm mysql_prod_data
          fi
          
          # 기존 이미지 정리
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-springboot)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-springboot
          fi
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-python-api)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-python-api
          fi
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-frontend)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-frontend
          fi
          
          # 새 컨테이너 시작 (순서대로)
          echo "🚀 새 컨테이너 시작..."
          
          echo "1️⃣ MySQL 데이터베이스 시작..."
          sudo docker run -d \
            --name mozara-mysql-prod \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=1234 \
            -e MYSQL_DATABASE=mozara \
            -e MYSQL_USER=root \
            -e MYSQL_PASSWORD=1234 \
            -v mysql_prod_data:/var/lib/mysql \
            -v ./backend/springboot/db/mozara.sql:/docker-entrypoint-initdb.d/mozara.sql \
            --restart unless-stopped \
            mysql:8.0 --default-authentication-plugin=mysql_native_password
          
          echo "⏳ MySQL 컨테이너 시작 대기..."
          sleep 10
          
          # MySQL 컨테이너 상태 확인
          if ! sudo docker ps | grep -q "mozara-mysql-prod"; then
            echo "❌ MySQL 컨테이너가 시작되지 않았습니다. 로그 확인:"
            sudo docker logs mozara-mysql-prod
            exit 1
          fi
          echo "✅ MySQL 컨테이너가 시작되었습니다."
          
          echo "⏳ MySQL 헬스체크 대기..."
          for i in {1..30}; do
            if sudo docker exec mozara-mysql-prod mysqladmin ping -h localhost -u root -p1234 --silent; then
              echo "✅ MySQL이 준비되었습니다."
              break
            else
              echo "⏳ MySQL 대기 중... ($i/30)"
              sleep 2
            fi
            if [ $i -eq 30 ]; then
              echo "❌ MySQL 시작 실패. 컨테이너 로그 확인:"
              sudo docker logs mozara-mysql-prod
              exit 1
            fi
          done
          
          echo "2️⃣ Backend 서비스들 시작..."
          
          echo "2-1️⃣ Spring Boot 백엔드 시작..."
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-springboot)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-springboot
          fi
          sudo docker pull $DOCKERHUB_USERNAME/mozara-springboot
          sudo docker run -d \
            --name mozara-springboot-prod \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/mozara?useSSL=false&serverTimezone=UTC \
            -e SPRING_DATASOURCE_USERNAME=root \
            -e SPRING_DATASOURCE_PASSWORD=1234 \
            -e AI_PYTHON_BASE_URL=http://localhost:8000 \
            -e ELEVEN_ST_API_KEY=$ELEVEN_ST_API_KEY \
            -e GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID \
            -e GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET \
            -e KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET \
            --restart unless-stopped \
            $DOCKERHUB_USERNAME/mozara-springboot
          
          echo "2-2️⃣ Python API 백엔드 시작..."
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-python-api)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-python-api
          fi
          sudo docker pull $DOCKERHUB_USERNAME/mozara-python-api
          sudo docker run -d \
            --name mozara-python-api-prod \
            -p 8000:8000 \
            -e GEMINI_API_KEY=$GEMINI_API_KEY \
            -e OPENAI_API_KEY=$OPENAI_API_KEY \
            -e YOUTUBE_API_KEY=$YOUTUBE_API_KEY \
            -e ELEVEN_ST_API_KEY=$ELEVEN_ST_API_KEY \
            -e PINECONE_API_KEY=$PINECONE_API_KEY \
            -e PINECONE_ENVIRONMENT=$PINECONE_ENVIRONMENT \
            -e PINECONE_INDEX_NAME=$PINECONE_INDEX_NAME \
            --restart unless-stopped \
            $DOCKERHUB_USERNAME/mozara-python-api
          
          echo "⏳ Backend 서비스들 시작 대기..."
          sleep 10
          
          echo "3️⃣ React 프론트엔드 시작..."
          if [ "$(sudo docker images -q $DOCKERHUB_USERNAME/mozara-frontend)" ]; then
            sudo docker rmi -f $DOCKERHUB_USERNAME/mozara-frontend
          fi
          sudo docker pull $DOCKERHUB_USERNAME/mozara-frontend
          sudo docker run -d \
            --name mozara-frontend-prod \
            -p 3000:80 \
            --restart unless-stopped \
            $DOCKERHUB_USERNAME/mozara-frontend
          
          echo "4️⃣ Nginx 프록시 시작..."
          # Nginx 설정 파일 생성
          cat > nginx.conf << 'NGINX_EOF'
server {
    listen 80;
    server_name mozaracare.duckdns.org;

    client_max_body_size 10m;

    # Frontend 프록시
    location / {
        proxy_pass http://172.17.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # API 프록시
    location /api/ {
        proxy_pass http://172.17.0.1:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # WebSocket 프록시
    location /ws-game/ {
        proxy_pass http://172.17.0.1:8080/ws-game/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
    
    # 파일 업로드 프록시
    location /uploads/{
        proxy_pass http://172.17.0.1:8080/uploads/;
    }
}
NGINX_EOF
          
          # Nginx 컨테이너 실행
          sudo docker run -d \
            --name mozara-nginx-prod \
            -p 80:80 \
            -v $(pwd)/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
            --restart unless-stopped \
            nginx:alpine
          
          
          # 서비스 상태 확인
          sleep 10
          sudo docker ps
          
          echo "✅ AWS 배포 완료!"
          echo "🌐 서비스 URL: https://mozaracare.duckdns.org"
        EOF
    
    - name: Health check
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        # 서비스 상태 확인
        sleep 30
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8080/actuator/health || echo "Spring Boot health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:8000/ || echo "Python FastAPI health check failed"
        curl -f http://${{ secrets.LIVE_SERVER_IP }}:3000 || echo "Frontend health check failed"
        echo "🌐 최종 서비스 URL: https://mozaracare.duckdns.org"
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/aws_key.pem
