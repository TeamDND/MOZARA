name: Python FastAPI CI/CD

on:
  push:
    branches: [ main, dev ]
    paths: [ 'backend/python/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/python/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend/python
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run linting
      run: |
        cd backend/python
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        cd backend/python
        python -m pytest tests/ -v --cov=. --cov-report=xml
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        ELEVEN_ST_API_KEY: ${{ secrets.ELEVEN_ST_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        TESTING: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/python/coverage.xml
        flags: python-api
        name: python-api-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend/python
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        cd backend/python
        mkdir -p dist
        cp -r . dist/
        cd dist
        zip -r python-api.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.md"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-api-package
        path: backend/python/dist/python-api.zip
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-api-package
        path: ./artifacts
    
    - name: Deploy to server
      run: |
        echo "üöÄ Deploying Python FastAPI application..."
        echo "Package files:"
        ls -la ./artifacts/
        # Ïó¨Í∏∞Ïóê Ïã§Ï†ú Î∞∞Ìè¨ Î°úÏßÅ Ï∂îÍ∞Ä (Docker, AWS Lambda, GCP Cloud Run Îì±)
        echo "‚úÖ Deployment completed!"

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/python
        push: true
        tags: |
          mozara/python-api:latest
          mozara/python-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
