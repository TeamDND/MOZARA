spring.application.name=springboot
#spring.datasource.hikari.initialization-fail-timeout=-1
#spring.datasource.hikari.maximum-pool-size=10
#spring.datasource.url=jdbc:mysql://mysql:3306/mozara?useSSL=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://localhost:3306/mozara
spring.datasource.username=root
spring.datasource.password=${DB_PASSWORD:1234}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#spring.server.ip=http://404notfoundpage.duckdns.org

jwt.secret.key=${JWT_SECRET_KEY:alaoskjovjcpovcjqawpjcxapsjcpaosjcpasocpoadasjdlakslaks}

### AI Backend Configuration ###
ai.python.base-url=http://localhost:8000

### File Upload Configuration ###
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

### Naver OAuth2 ###
#spring.security.oauth2.client.registration.naver.client-name=naver
#spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
#spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
#spring.security.oauth2.client.registration.naver.redirect-uri=${spring.server.ip}/api/login/oauth2/code/naver
#spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.naver.scope=name,email
#
#spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
#spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
#spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me

### Google OAuth2 ###
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
#spring.security.oauth2.client.registration.google.client-name=google
#spring.security.oauth2.client.registration.google.redirect-uri=https://${DOMAIN_NAME:mozaracare.duckdns.org}/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.google.scope=openid,profile,email

# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

# 배포 후 변경할 설정들:
# 1. redirect-uri를 실제 도메인으로 변경
# 2. Google Cloud Console에서 승인된 리다이렉트 URI 추가
# 3. 환경변수로 클라이언트 ID/Secret 관리

### Kakao OAuth2 ###
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID:}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET:}
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.redirect-uri=https://${DOMAIN_NAME:mozaracare.duckdns.org}/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
#
#spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
#spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
#spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
#spring.security.oauth2.client.provider.kakao.user-name-attribute=id
#
#logging.level.com.example.notfound_backend=DEBUG
#logging.level.org.springframework.security=DEBUG
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.springframework.orm.jpa=DEBUG